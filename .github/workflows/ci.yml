name: 🔄 Continuous Integration

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE.md'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE.md'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  CACHE_DEPENDENCY_PATH: package-lock.json

jobs:
  validate:
    name: 🔍 Validate
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Validate GitHub workflows
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: .github/workflows/
          config_file: .yamllint.yml
          
      - name: 🔍 Validate package.json
        run: |
          if ! jq . package.json > /dev/null 2>&1; then
            echo "❌ package.json is not valid JSON"
            exit 1
          fi
          echo "✅ package.json is valid"

  build:
    name: 🏗️ Build & Test
    runs-on: ${{ matrix.os }}
    needs: validate
    timeout-minutes: 10
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: ['18', '20', '21']
        exclude:
          # Skip some combinations to reduce CI cost
          - os: windows-latest
            node-version: '21'
          - os: macos-latest
            node-version: '21'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 Lint code
        run: npm run lint

      - name: 🏗️ Build project
        run: npm run build

      - name: 🧪 Run tests
        run: npm test -- --coverage --watchAll=false
        env:
          NODE_ENV: test

      - name: 📊 Upload coverage reports
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '18'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-${{ matrix.os }}-node${{ matrix.node-version }}

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔒 Audit dependencies
        run: npm audit --audit-level moderate

      - name: 🔍 Security scan with Snyk
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  type-check:
    name: 🎯 Type Check
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 5
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🎯 Type check
        run: npx tsc --noEmit --incremental false

  package-test:
    name: 📦 Package Test
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 5
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build project
        run: npm run build

      - name: 📦 Test package creation
        run: |
          npm pack --dry-run
          echo "✅ Package creation successful"

      - name: 🧪 Test package installation
        run: |
          # Pack the package
          npm pack
          
          # Install it globally in a temporary directory
          mkdir -p /tmp/test-install
          cd /tmp/test-install
          npm init -y
          npm install $GITHUB_WORKSPACE/*.tgz
          
          # Test that the binary works
          npx whatsapp-mcp-server --help || echo "Binary help command executed"
          
          echo "✅ Package installation test successful"

  integration:
    name: 🔗 Integration Test
    runs-on: ubuntu-latest
    needs: [build, security, type-check]
    timeout-minutes: 10
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build project
        run: npm run build

      - name: 🔗 Run integration tests
        run: |
          # Test MCP server startup (without WhatsApp authentication)
          timeout 10s npm start || test $? = 124
          echo "✅ MCP server startup test passed"
          
          # Test that the server responds to MCP protocol
          node -e "
            const { Server } = require('@modelcontextprotocol/sdk/server/index.js');
            const server = new Server({ name: 'test', version: '1.0.0' }, { capabilities: { tools: {} } });
            console.log('✅ MCP SDK integration test passed');
          "

  notify-success:
    name: 🎉 Notify Success
    runs-on: ubuntu-latest
    needs: [build, security, type-check, package-test]
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🎉 Notify success
        run: |
          echo "✅ All CI checks passed successfully!"
          echo "🚀 Commit: ${{ github.sha }}"
          echo "👤 Author: ${{ github.actor }}"
          echo "📝 Message: ${{ github.event.head_commit.message }}"

  notify-failure:
    name: ❌ Notify Failure
    runs-on: ubuntu-latest
    needs: [build, security, type-check, package-test]
    if: failure()
    
    steps:
      - name: ❌ Notify failure
        run: |
          echo "❌ CI checks failed!"
          echo "🔗 Check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "📝 Commit: ${{ github.sha }}"
          echo "👤 Author: ${{ github.actor }}"